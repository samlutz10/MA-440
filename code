import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier as RFC
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.metrics import accuracy_score
import seaborn as sn
#main_data_soc = pd.read_csv('Downloads/data.csv',
#                            sep = '\t')
#main_data_soc.to_csv('Downloads/soc_data.csv', index=False)
main_data_soc = pd.read_csv('soc_data.csv')
cluster_data_soc_num = pd.read_csv('soc_data_clustered_em.csv')
cluster_data_soc_cat = cluster_data_soc_num.applymap(str)
x_socio = cluster_data_soc_num.iloc[:, 0:27]
y_socio = cluster_data_soc_num.iloc[:, 27]
x_train_soc, x_test_soc, y_train_soc, y_test_soc = train_test_split(
     x_socio, y_socio, test_size=0.45, random_state=0)
corr_matrix = x_socio.corr()
sn.heatmap(corr_matrix, annot=True, annot_kws={"size": 3})
plt.savefig('corr_matrix.png', dpi=300)
print(cluster_data_soc_num.groupby('cluster').mean())

from sklearn import tree
clf_dt_soc = tree.DecisionTreeClassifier(max_depth = 4, criterion='entropy', random_state=42)
clf_dt_soc.fit(x_train_soc, y_train_soc)
y_dt_pred_soc = clf_dt_soc.predict(x_test_soc)
train_acc_soc = accuracy_score(y_train_soc, clf_dt_soc.predict(x_train_soc))
test_acc_soc = accuracy_score(y_test_soc, y_dt_pred_soc)

print('DT: Psych. train acc: ', round(train_acc_soc*100, 4))
print('DT: Psych. test acc: ', round(test_acc_soc*100, 4))

rf_clf_soc = RFC(random_state=0)
rf_clf_soc = rf_clf_soc.fit(x_train_soc, y_train_soc)
y_rfc_pred_soc = rf_clf_soc.predict(x_test_soc)
rfc_train_acc_soc = accuracy_score(y_train_soc, rf_clf_soc.predict(x_train_soc))
rfc_test_acc_soc = accuracy_score(y_test_soc, y_rfc_pred_soc)
print('RFC: Psych train acc: ', round(rfc_train_acc_soc, 4))
print('RFC: Psych test acc: ', round(rfc_test_acc_soc, 4))

from sklearn.ensemble import GradientBoostingClassifier as GBC
gbt_clf_soc = GBC(n_estimators=100, learning_rate=1.0, random_state=0).fit(x_train_soc, y_train_soc)
y_gbt_pred_soc = gbt_clf_soc.predict(x_test_soc)
gbt_train_acc_soc = accuracy_score(y_train_soc, gbt_clf_soc.predict(x_train_soc))
gbt_test_acc_soc = accuracy_score(y_test_soc, y_gbt_pred_soc)
print('RFC: Psych train acc: ', round(gbt_train_acc_soc, 4))
print('GBT: Psych test acc: ', round(gbt_test_acc_soc, 4))
#cluster1 = sociopath[sociopath.cluster=='cluster1']
#cluster2 = sociopath[sociopath.cluster=='cluster2']
#cluster3 = sociopath[sociopath.cluster=='cluster3']

import graphviz
dot_data = tree.export_graphviz(clf_dt_soc, feature_names=x_socio.columns, class_names=clf_dt_soc.classes_, out_file=None, filled=True)
graph = graphviz.Source(dot_data, format="png")
graph.render("dt_psych_stuff")
ftn = np.array(x_socio.columns)
text_representation = tree.export_text(clf_dt_soc)
print(text_representation)

from sklearn.decomposition import PCA
pca = PCA(n_components=2)
principalComponents = pca.fit_transform(x_socio)
principalDf = pd.DataFrame(data = principalComponents
             , columns = ['principal component 1', 'principal component 2'])
finalDf = pd.concat([principalDf, y_socio], axis = 1)
fig = plt.figure(figsize = (16,16))
ax = fig.add_subplot(1,1,1) 
ax.set_xlabel('Principal Component 1', fontsize = 15)
ax.set_ylabel('Principal Component 2', fontsize = 15)
ax.set_title('2 component PCA', fontsize = 20)
targets = ['cluster1', 'cluster2', 'cluster3', 'cluster4']
colors = ['r', 'g', 'b', 'y']
for target, color in zip(targets,colors):
    indicesToKeep = finalDf['cluster'] == target
    ax.scatter(finalDf.loc[indicesToKeep, 'principal component 1']
               , finalDf.loc[indicesToKeep, 'principal component 2']
               , c = color
               , alpha = 0.3
               , s = 50)
ax.legend(targets)
ax.grid()
plt.savefig('cluster_pca.png', dpi=300)
pca.components_
